
"""
.. module:: cim.v2.extended_schema_for_iso_package.py

   :license: GPL / CeCILL
   :platform: Unix, Windows
   :synopsis: Schema information for the cim v2 ontology.

.. moduleauthor:: Earth System Documentation (ES-DOC) <dev@es-doc.org>
.. note:: Code generated using the pyesdoc framework.

"""


def algorithm():
    """Representation of the LE_Algorithm Class.

	"""
    return {
        'type': 'class',
        'base': None,
        'is_abstract': False,
        'is_document': False,
        'properties': [
            ('citation', 'shared.citation', '0.1',
                "Formal documentation for the algorithm used."),
            ('description', 'str', '0.1',
                "Textural description of algorithm"),
            ]
    }


def lineage():
    """Representation of the ISO19115 lineage provenance description.

    Information about the events or source data used in constructing a
    dataset

	"""
    return {
        'type': 'class',
        'base': None,
        'is_abstract': False,
        'is_document': True,
        'properties': [
            ('meta', 'shared.doc_meta_info', '1.1',
                "Injected document metadata."),
            ('process_step', 'iso.process_step', '0.N',
                "How the resource was developed or set of events associated with production."),
            ('source', 'data.dataset', '0.N',
                "Input(s) used in production of resource"),
            ('statement', 'str', '0.1',
                "General explanation of the level of knowledge or lack thereof about the lineage"),
            ]
    }


def process_step():
    """Representation of the ISO19115 LE_ProcessStep and parent
    LI_ProcessStep classes.

	"""
    return {
        'type': 'class',
        'base': None,
        'sub-classes': [
            'activity.child_simulation',
            'cmip.cmip_simulation'
            'activity.simulation',
        ],
        'is_abstract': False,
        'is_document': False,
        'properties': [
            ('description', 'str', '1.1',
                "General description of the events in the development of the resource."),
            ('execution_date_time', 'time.date_time', '0.1',
                "The date and time when the process was completed."),
            ('processing_information', 'iso.processing', '0.N',
                "Comprehensive information on the processing carried out"),
            ('processor', 'shared.responsibility', '0.1',
                "Individual or organisation responsible for the process step. Use roleCode='processor'. Contact information is not necessary."),
            ('rationale', 'str', '0.1',
                "Purpose for performing the process on the resource"),
            ('reference', 'shared.citation', '0.N',
                "Process step documentation"),
            ('report', 'iso.process_step_report', '0.N',
                "Report generated by the process step"),
            ('source', 'data.dataset', '0.N',
                "Information on the inputs used in the process step."),
            ]
    }


def process_step_report():
    """Report of what happened during a processing step.

    Representation of ISO LE_ProcessStepReport, modified to use links or
    body text, rather than files.

	"""
    return {
        'type': 'class',
        'base': None,
        'is_abstract': False,
        'is_document': False,
        'properties': [
            ('description', 'str', '1.1',
                "Summary textual description of what occurred during the process step"),
            ('link', 'shared.online_resource', '0.1',
                "Link to actual report documents, if any"),
            ('name', 'str', '1.1',
                "Name of the processing report"),
            ]
    }


def processing():
    """Representation of the ISO19115 LE_Processing class Note that the
    algorithm definition has been adjusted to be more generic and less
    "instrument obsessed" than ISO19115.

    Name is an extension, and the identifier is simply a code string
    (id) ... but given there may be no identifier space for this
    processing step, it is made optional, rather than mandatory as in
    ISO. For export to ISO, the recommendation is to use the identifier
    of the CIM document which uses this class.

	"""
    return {
        'type': 'class',
        'base': None,
        'is_abstract': False,
        'is_document': False,
        'properties': [
            ('algorithm', 'iso.algorithm', '0.N',
                "details of the methodology carried out in this processing"),
            ('documentation', 'shared.citation', '0.1',
                "reference to documentation describing the processing"),
            ('identifier', 'str', '0.1',
                "Identifier (strictly, a code which can be used in an MD_Identifier"),
            ('name', 'str', '1.1',
                "Name of the processing action (ISO extension)"),
            ('procedure_description', 'str', '0.1',
                "additional details about the processing procedures"),
            ('runtime_parameters', 'str', '0.1',
                "parameters to control the processing operations, entered at run time"),
            ('software_reference', 'shared.citation', '0.N',
                "Reference to document describing processing software"),
            ]
    }


def quality_evaluation_output():
    """A specific evaluation output.

	"""
    return {
        'type': 'class',
        'base': "shared.online_resource",
        'base-hierarchy': [
            'shared.online_resource'
            ],
        'base-hierarchy-depth': 1,
        'is_abstract': False,
        'is_document': False,
        'properties': [
            ('output_type', 'iso.dq_evaluation_result_type', '1.1',
                "Type of evaluation resource"),
            ],
        'properties-all': [
            'description',
            'linkage',
            'name',
            'output_type',
            'protocol',
            ],
        'properties-inherited': [
            'description :: shared.online_resource',
            'linkage :: shared.online_resource',
            'name :: shared.online_resource',
            'protocol :: shared.online_resource',
            ]
    }


def quality_evaluation_result():
    """The output of some quality evaluation against a specific measure
    for evaluation quality.

    This flattens several ISO classes, including DQ_Result,
    DQ_ConformanceResult, DQ_QuantativeResult, DQ_Element.

	"""
    return {
        'type': 'class',
        'base': None,
        'is_abstract': False,
        'is_document': False,
        'properties': [
            ('date', 'time.date_time', '0.1',
                "Date of quality evaluation"),
            ('evaluation_procedure', 'str', '0.1',
                "Brief description of the evaluation method"),
            ('evaluator', 'shared.party', '0.1',
                "Person or entity reesponsible for evaluation"),
            ('name', 'str', '1.1',
                "Name of measure being evaluated"),
            ('passed', 'bool', '0.1',
                "Success or failure of the evaluation, if boolean concept is appropriate"),
            ('results', 'iso.quality_evaluation_output', '0.N',
                "Evaluation outputs, including log files, plots, or datasets"),
            ('specification', 'shared.citation', '0.1',
                "Formal specification of the evaluation method"),
            ('summary_result', 'str', '0.1',
                "Summary description of evaluation outcome"),
            ]
    }


def quality_issue():
    """A description of some scientific quality issue known about a
    resource described by this ontology.

    E.g. if a model is known to have a particular problem, or there has
    been a problem found with a dataset. Expect that most such detail
    should be managed in an external (and formal) issue tracker.

	"""
    return {
        'type': 'class',
        'base': None,
        'is_abstract': False,
        'is_document': False,
        'properties': [
            ('description', 'str', '0.1',
                "Description of issue"),
            ('reporter', 'shared.party', '0.1',
                "Person or entity responsible for reporting/describing issue"),
            ('summary', 'str', '1.1',
                "Brief (one-line) description of issue"),
            ('tracked_issue', 'shared.online_resource', '0.1',
                "Issue as lodged in an external issue tracker"),
            ]
    }


def quality_report():
    """A report detailing the quality of some aspect of the target resource.

	"""
    return {
        'type': 'class',
        'base': None,
        'is_abstract': False,
        'is_document': True,
        'properties': [
            ('issues', 'iso.quality_issue', '0.N',
                "Issues with this resource"),
            ('meta', 'shared.doc_meta_info', '1.1',
                "Injected document metadata."),
            ('reports', 'iso.quality_evaluation_result', '0.N',
                "Reports against quality measures for this resource"),
            ('target', 'shared.online_resource', '1.1',
                "Document about to which this quality report applies"),
            ]
    }




